function launch(override_autozoom,params,d_index,delay_casualties = false) {
	if(DEBUG) console.log("LAUNCH");
	var fireball = false;
	var crater = false;
	var casualties = false;
	var humanitarian = false;
	var humanitarian_show = false;
	var fallout = false;
	var collapser = false;
	var cep = false;
	var cep_ft = 0;
	var erw = false;
	var cloud = false;

	var c = [];
	var psi = [];
	var rem = [];
	var therm = [];

	var errs = [];

	if(!params) {

		ktInput = $("#theKt").val();

		if(ktInput=='') {
			if($("#preset").val()>0) {
				ktInput = $("#preset").val();
				$("#theKt").val(ktInput);
			}
		}

		if(ktInput=='') {
			$("#detonate_error").html("Please specify a <b>yield</b> above.")
			$("#detonate_error").slideDown(100).delay(2000).slideUp(100);
			$("#yield_div").fadeIn(100).fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);
			return false;
		} 
	
		kt = parseFloat(ktInput);

		if(kt<=0) {
			$("#detonate_error").html("Please specify a <b>yield</b> above.")
			$("#detonate_error").slideDown(100).delay(2000).slideUp(100);
			$("#yield_div").fadeIn(100).fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);
			return false;
		}
		$("#detonate_error").hide();
		
		pos = getPosition(marker);

		var opt = document.forms["options"];

		var hob_ft = 0;
		if(opt["hob"][0].checked) {
			var airburst = true;
			if(opt["hob_option"][1].checked) {
				var hob_opt = 1;
				var hob_opt_psi = parseFloat(opt["hob_psi"].value);
				if(hob_opt_psi<1||hob_opt_psi>10000) {
					errs.push("Range of psi for choosing an optimum height is 1 to 10,000.");
					var hob_opt = 0;
				} else {
					hob_ft = Math.round(bc.opt_height_for_psi(kt,parseFloat(hob_opt_psi)));
				}
			} else if(opt["hob_option"][2].checked) {
				var hob_opt = 2;
				var hob_opt_psi = 5; //default
				switch(parseInt(opt["hob_h_u"].value)) {
					case 1: //m
						hob_ft = Math.round(parseFloat(opt["hob_h"].value)*m2ft);
					break;
					case 2: //mi
						hob_ft = Math.round(parseFloat(opt["hob_h"].value)*mi2ft);
					break;
					case 3: //km
						hob_ft = Math.round(parseFloat(opt["hob_h"].value)*km2ft);				
					break;
					default: //ft
						hob_ft = Math.round(parseFloat(opt["hob_h"].value));
					break;
				}
			} else {
				var hob_opt = 0;
			}
		} else {
			var airburst = false;
		}

		for(var i=0; i<opt["psi"].length;i++) {
			if(opt["psi"][i].checked) {
				if(opt["psi"][i].value>0) {
					psi.push(opt["psi"][i].value);
				} else if(opt["psi"][i].value<0) {
					var other = parseFloat(opt["psi_other_"+(parseInt(opt["psi"][i].value)*-1)].value);
					if((other>=1)&&(other<=10000)) {
						psi.push(parseFloat(other));
					} else {
						errs.push("Range for overpressure is 1-10,000 psi; entry of "+other+" skipped.");
					}
				}
			}
		}
		
		for(var i=0; i<opt["rem"].length;i++) {
			if(opt["rem"][i].checked) {
				if(opt["rem"][i].value>0) {
					rem.push(opt["rem"][i].value);
				} else if(opt["rem"][i].value < 0){
					var other = parseFloat(opt["rem_other_"+(parseInt(opt["rem"][i].value)*-1)].value);
					if(other>=1&&other<=Math.pow(10,8)) {
						rem.push(other);
					} else {
						errs.push("Range for initial nuclear radiation is 1-10^8 rem; entry of "+other+" skipped.");
					}
				}
			}
		}

		for(var i=0; i<opt["therm"].length;i++) {
			if(opt["therm"][i].checked) {
				if(opt["therm"][i].value>0||opt["therm"][i].value[0]=="_") {
					therm.push(opt["therm"][i].value);
				} else if (opt["therm"][i].value<0) {
					var other = parseFloat(opt["therm_other_"+(parseInt(opt["therm"][i].value)*-1)].value);
					if(other>0) {
						therm.push(other);
					}
				}
			}
		}
	
		if(opt["other"][0].checked) casualties = true;
		if(opt["other"][1].checked) fireball = true;
		if(opt["other"][2].checked) crater = true;
		if(opt["other"][3].checked) humanitarian = true;
		if(opt["other"][4].checked) humanitarian_show = true;
		if(opt["other"][5].checked) fallout = true;
		if(opt["other"][6].checked) cep = true;
		if(opt["other"][7].checked) cloud = true;	

		var fallout_wind = parseInt(document.getElementById("fallout_wind").value);
		if(fallout_wind<0) { //bind the wind speed to respectable options
			fallout_wind = 0;
			document.getElementById("fallout_wind").value = fallout_wind;
		} else if(fallout_wind>50) { 
			fallout_wind = 50;
			document.getElementById("fallout_wind").value = fallout_wind;
		}
	
		var ff = parseInt(document.getElementById("fallout_fission").value);
		if(ff<=0) {
			ff = 1;
			document.getElementById("fallout_fission").value = ff;
		} else if (ff>100) {
			ff = 100;
			document.getElementById("fallout_fission").value = ff;
		}

		if(document.getElementById("fallout_angle").value) {
				var fallout_angle = document.getElementById("fallout_angle").value;
		} else if(windsock_marker) {
			markerpos = getPosition(marker);
			windsockpos = getPosition(windsock_marker);
			var fallout_angle = fallout_bearing(markerpos,windsockpos);
		} else {
				var fallout_angle = null;
		}

		if(opt["collapser"]!=undefined) {
			if(opt["collapser"].checked) collapser = true;
		}

		dets[det_index] = {
			kt: kt,
			pos: pos,
			airburst: airburst,
			hob_opt: hob_opt,
			hob_psi: hob_opt_psi,
			hob_ft: hob_ft,
			fireball: fireball,
			crater: crater,
			casualties: casualties,
			humanitarian: humanitarian,
			fallout: fallout,
			fallout_wind: fallout_wind,
			ff: ff,
			fallout_angle: fallout_angle,
			erw: erw,
			psi: psi,
			rem: rem,
			therm: therm,
			cep: cep,
			cep_ft: cep_ft,
			cloud: cloud
		};

	} else {
		if(DEBUG) console.log(params);
		var opt = document.forms["options"];
		if(!params.pos) return false;
		det_index = d_index;
		if(params.kt) {
			kt = params.kt; 
			$("#theKt").val(kt);
		}
		if(params.pos) { 
			pos = params.pos;
			setPosition(marker,pos);
		}
		if(params.airburst!=undefined)	{
			airburst = params.airburst;
			if(airburst) { 
				opt["hob"][0].checked = true;
			} else {
				opt["hob"][1].checked = true;
			}
		}

		if(params.hob_opt!=undefined) {
			hob_opt = params.hob_opt;
			hob_opt_psi = params.hob_psi;
			if(typeof params.hob !="undefined") {
				params.hob_ft = params.hob; //some old permalinks have this instead, it looks like
			}
			hob_ft = params.hob_ft;
			opt["hob_option"][hob_opt].checked = true;
			if(hob_opt_psi) opt["hob_psi"].value = hob_opt_psi;
			if(hob_ft||params.hob_ft!=undefined) opt["hob_h"].value = hob_ft;
			if(!hob_ft&&hob_opt_psi&&hob_opt==1) {
				hob_ft = Math.round(bc.opt_height_for_psi(kt,parseFloat(hob_opt_psi)));
			}
		}

		if(params.fireball!=undefined) { 
			fireball = params.fireball;
			opt["other"][1].checked = fireball;
		}
		
		if(params.crater) { 
			crater = params.crater;
			opt["other"][2].checked = crater;
		}
		if(params.casualties) { 
			casualties = params.casualties;
			opt["other"][0].checked = casualties;
		}
		if(params.humanitarian) { 
			humanitarian = params.humanitarian;
			opt["other"][3].checked = humanitarian;
		}
		if(params.humanitarian_show) { 
			humanitarian = params.humanitarian_show;
			opt["other"][4].checked = humanitarian_show;
		}
		if(params.fallout) { 
			fallout = params.fallout;
			opt["other"][5].checked = fallout;
			document.getElementById("fallout_check_2").checked = opt["other"][5].checked;
		}
		if(params.cloud) {
			cloud = params.cloud;
			opt["other"][7].checked = cloud;
		}
		
		if(params.fallout_wind!=undefined) {
			fallout_wind = params.fallout_wind;
			document.getElementById("fallout_wind").value = fallout_wind;
		}

		if(params.ff) {
			ff = params.ff;
			document.getElementById("fallout_fission").value = ff;
		}	

		if(params.fallout_angle!==undefined) {
			fallout_angle = params.fallout_angle;
			document.getElementById("fallout_angle").value = fallout_angle;
		}
		
		if(params.fallout_rad_doses) {
			rad_doses = params.fallout_rad_doses;
		}
		
		if(params.cep) {
			cep = params.cep;
			opt["other"][6].checked = cep;
		}
		
		if(params.cep_ft) {
			cep_ft = params.cep_ft;
			opt["cep"].value = cep_ft;
		}
		
		if(params.erw) { 
			erw = params.erw;
			//opt["other"][7].checked = erw;
		}
		
		if(params.psi&&!isEmptyArray(params.psi)) { 
			psi = params.psi;
			document.getElementById("addrow_psi").innerHTML="";
			opt["psi_other_1"].value = "";
			document.getElementById("psi_other_check_1").checked = false;
			
			for(var i=0; i<opt["psi"].length;i++) {
				if(inArray(opt["psi"][i].value,psi)) {
					opt["psi"][i].checked = true;
				} else {
					opt["psi"][i].checked = false;
				}
			}
			for(var i=0;i<psi.length;i++) {
				switch(psi[i]){
					case "3000": case "200": case "20": case "5": case "1":
						//do nothing, these are already in the controls
					break;
					default:
						var p = 1;
						while(opt["psi_other_"+p].value) {
							addrow('psi');
							p++;
						}
						opt["psi_other_"+p].value = psi[i];
						document.getElementById("psi_other_check_"+p).checked = true;
					break;
				}
			}
		} else {
			for(var i=0; i<opt["psi"].length;i++) {
				opt["psi"][i].checked = false;
			}		
		}
		if(params.rem&&!isEmptyArray(params.rem)) { 

			rem = params.rem;
			document.getElementById("addrow_rem").innerHTML="";
			opt["rem_other_1"].value = "";
			document.getElementById("rem_other_check_1").checked = false;
			
			for(var i=0; i<opt["rem"].length;i++) {
				if(inArray(opt["rem"][i].value,rem)) {
					opt["rem"][i].checked = true;
				} else {
					opt["rem"][i].checked = false;
				}
			}
			for(var i=0;i<rem.length;i++) {
				switch(rem[i]){
					case "100": case "500": case "600": case "1000": case "5000":
						//do nothing, these are already in the controls
					break;
					default:
						var p = 1;
						while(opt["rem_other_"+p].value) {
							addrow('rem');
							p++;
						}
						opt["rem_other_"+p].value = rem[i];
						document.getElementById("rem_other_check_"+p).checked = true;
					break;
				}
			}
		} else {
			for(var i=0; i<opt["rem"].length;i++) {
				opt["rem"][i].checked = false;
			}		
		}
		if(params.therm&&!isEmptyArray(params.therm)) { 
			therm = params.therm;
			document.getElementById("addrow_therm").innerHTML="";
			opt["therm_other_1"].value = "";
			document.getElementById("therm_other_check_1").checked = false;
			
			for(var i=0; i<opt["therm"].length;i++) {
				if(inArray(opt["therm"][i].value,therm)) {
					opt["therm"][i].checked = true;
				} else {
					opt["therm"][i].checked = false;
				}
			}
			for(var i=0;i<therm.length;i++) {
				switch(therm[i]){
					case "_3rd-100": case "_3rd-50": case "_2nd-50": case "_1st-50": case "_noharm-100": case "35":
						//do nothing, these are already in the controls
					break;
					default:
						var p = 1;
						while(opt["therm_other_"+p].value) {
							addrow('therm');
							p++;
						}
						opt["therm_other_"+p].value = therm[i];
						document.getElementById("therm_other_check_"+p).checked = true;
					break;
				}
			}
		} else {
			for(var i=0; i<opt["therm"].length;i++) {
				opt["therm"][i].checked = false;
			}		
		}
	}
	if(typeof params !=="undefined") {
		if(params.nd==1) return;
	}

	pos_lat = latval(pos);
	pos_lng = lngval(pos);
	
	/*if(humanitarian) {
		get_places(pos_lat,pos_lng, bc.distance_from_scaled_range(bc.maximum_overpressure_range(10,airburst),kt)*mi2m,humanitarian_show,"theLegendPlaces"); 
	}*/
	
	if(casualties) {
		if(delay_casualties) {
			casualties_delayed = true;
		} else {
			if(DEBUG) console.log("get_casulaties_multi",dets);
			get_casualties_multi(dets,"theLegendCasualties");
		}
	} else {
		$("#theLegendCasualties").html("");
	}
	
	if(fallout) {
		if(hob_ft&&airburst) {
			do_fallout(kt,fallout_wind,ff,fallout_angle,"theLegendFallout",airburst,hob_ft);
		} else {
			do_fallout(kt,fallout_wind,ff,fallout_angle,"theLegendFallout",airburst);		
		}
	}

	if(cep==true) {
		switch(parseInt(opt["cep_unit"].value)) {
			case 1: //m
				cep_ft = Math.round(parseFloat(opt["cep"].value)*m2ft);
			break;
			case 2: //mi
				cep_ft = Math.round(parseFloat(opt["cep"].value)*mi2ft);
			break;
			case 3: //km
				cep_ft = Math.round(parseFloat(opt["cep"].value)*km2ft);				
			break;
			default: //ft
				cep_ft = Math.round(parseFloat(opt["cep"].value));
			break;
		}
		if(cep_ft>0) {
			c.push([cep_ft*ft2mi,"cep",50]);
			c.push([cep_ft*2*ft2mi,"cep",43]);
			c.push([cep_ft*3*ft2mi,"cep",7]);			
		} else {
			errs.push("The Circular Error Probable given is an invalid value. CEP must be greater than zero to display.");	
		}
	}

	if(c_radii[det_index]) {
		for(var i=0;i<c_radii[det_index].length;i++) {
			c_radii[det_index][i] = remove(c_radii[det_index][i]);
		}
		c_radii[det_index] = [];
	}

	for(var i=0;i<psi.length;i++) {
		if(airburst==true) {
			if(!hob_opt) {
				var t = bc.psi_distance(kt,psi[i],airburst);
			} else {
				var t = bc.range_from_psi_hob(kt,psi[i],hob_ft)*ft2mi;
			}
		} else {
			var t = bc.range_from_psi_hob(kt,psi[i],0)*ft2mi;
			//var t = bc.psi_distance(kt,psi[i],airburst);
		}
		if(t>0) {
			c.push([t,"psi",psi[i]]);	
		} else {
			var err = "The blast pressure equation for "+unit(psi[i],"psi")+" failed to give a result for the given yield and height settings.";
			if(hob_ft&&airburst&&hob_opt) {
				err+=" The maximum detonation height for this effect to be felt on the ground is "+unit(bc.max_height_for_psi(kt,psi[i])*ft2km,"km")+".";
			}
			errs.push(err);
		}
	}

	for(var i=0;i<rem.length;i++) {
		if(erw) {
			var r_kt = kt*10;
		} else {
			var r_kt = kt;
		}
		var t = bc.initial_nuclear_radiation_distance(r_kt,rem[i]);
		var t1 = t;
		if(hob_ft&&airburst) {
			t = bc.ground_range_from_slant_range(t,hob_ft*ft2mi);
		}
		if(t>0) {
			c.push([t,"rem",rem[i]]);
		} else {
			var err = "The initial nuclear radiation equation for "+unit(rem[i],"rem")+" failed to give a result for the given yield and height settings.";
			if(hob_ft&&airburst) {
				if(hob_ft*ft2mi > t1) {
					err+=" The maximum detonation height for this effect to be felt on the ground is "+unit(t1*mi2km,"km")+".";
				}
			}
			errs.push(err);
		}
	}

	for(var i=0;i<therm.length;i++) {		
		var t = bc.thermal_distance(kt,therm[i],airburst);
		var t1 = t;
		if(hob_ft&&airburst) {
			t = bc.ground_range_from_slant_range(t,hob_ft*ft2mi);
		}
		if(t>0) {
			c.push([t,"therm",therm[i]]);
		} else {
			if(therm[i][0]=="_") {
				switch(therm[i]) {
				case "_3rd-100":
					var t_text = "3rd degree burns";
				break;
				case "_3rd-50":
					var t_text = "3rd degree burns (50%)";
				break;
				case "_2nd-50":
					var t_text = "2nd degree burns (50%)";
				break;
				case "_1st-50":
					var t_text = "1st degree burns (50%)";
				break;
				case "_noharm-100":
					var t_text = "no harm";
				break;	
				}
				var err = "Thermal radiation ("+t_text+") equation failed to give a result for the given yield and height."
				if(hob_ft&&airburst) {
					if(hob_ft*ft2mi > t1) {
						err+=" The maximum detonation height for this effect to be felt on the ground is "+unit(t1*mi2km,"km")+".";
					}
				}
				errs.push(err);				
			} else {
				var err = "Thermal radiation ("+unit(therm[i],"cal")+") equation failed to give a result for the given yield and height.";
				if(hob_ft&&airburst) {
					if(hob_ft*ft2mi > t1) {
						err+=" The maximum detonation height for this effect to be felt on the ground is "+unit(t1*mi2km,"km")+".";
					}
				}
				errs.push(err);							
			}
		}
	}
	
	if(fireball) {
		var t = bc.fireball_radius(kt,airburst);
		if(t>0) {
			c.push([t,"fireball",""]);
		} else {
			errs.push("The fireball size equation failed to give a result for the given yield.");				
		}
	}

	var cr = bc.crater(kt,true);
	if(crater) {
		if((cr[0]>0)&&(cr[1]>0)) {
			c.push([cr[1],"crater",""]);
		} else {
			errs.push("The crater size equation failed to give a result for the given yield.");
		}
	}

	if(collapser) {
		if($('.hider-arrow').attr("expanded") == "1") {
			$('.hider-arrow').click();
		}
	}

	var legend ="";
	if(!hide_legend_hr) legend = "<hr>";
	legend+="<span id='effects-header'>";
	legend+="<b>Effect distances for a "+ ktOrMt(kt,false,true) + " "+(airburst?"airburst*":"surface burst")+"</b>:";
	legend+="<span class='hider-arrow' expanded='1'> &#9660;</span>"
	legend+="</span>";
	legend+="<div id='collapsed-content'>";
	legend+="<div class='effectsCaptions'>";

 	c.sort(function(a,b){return b[0]-a[0]});

	legend1 = ""; //this is a separate variable because we are going to be adding to it from the bottom up

	var effectCaptions = [];

	//cloud caption loads first, to show last
	if(cloud) {
		//all of these are in FEET
		var cloud_final_horizontal_semiaxis = bc.cloud_final_horizontal_semiaxis(kt); 
		var cloud_final_height = bc.cloud_top(kt);
		var cloud_final_vertical_semiaxis = (cloud_final_height-bc.cloud_bottom(kt))/2;

		var top_altitude = cloud_final_height*ft2km;
		var head_diameter = cloud_final_horizontal_semiaxis*2*ft2km;
		var head_height = cloud_final_vertical_semiaxis*2*ft2km;

		effectCaptions.push({
			title: "Mushroom cloud head height",
			radius: head_height,
			show_area: false,
			no_highlight: true,
			legendkey: "<span class='legendkey_symbol'>&varr;</span>",
			clear: true
		})

		effectCaptions.push({
			title: "Mushroom cloud head diameter",
			radius: head_diameter,
			id: "cloud_diameter",
			legendkey: "<span class='legendkey_symbol'>&harr;</span>",
		})

		effectCaptions.push({
			title: "Mushroom cloud altitude",
			topinsert: "<div><a class='effectImage' href='"+assets+"images/clouddiagram.png' title='Click to enlarge this image' target='_blank' onclick='show_image(this); return false;' ><img src='"+assets+"images/clouddiagram.png'></a></div>",
			radius: top_altitude,
			show_area: false,
			no_highlight: true,
			legendkey: "<span class='legendkey_symbol'>&uarr;</span>",
		})
	}

	c_radii[det_index] = [];

	var circs=0;
	for(rec in c) {
		switch (c[rec][1]) {		
			case "therm":
				switch(c[rec][2]) {
					case "_3rd-100":
						var t_text = "3rd degree burns";
						var t_extra = "100% probability for 3rd degree burns at this yield is "+unit(bc.thermal_radiation_param_q(kt,c[rec][2]),"cal")+".";
						var caption = "Third degree burns extend throughout the layers of skin, and are often painless because they destroy the pain nerves. They can cause severe scarring or disablement, and can require amputation.";
					break;
					case "_3rd-50":
						var t_text = "3rd degree burns (50%)";
						var t_extra = "50% probability for 3rd degree burns at this yield is "+unit(bc.thermal_radiation_param_q(kt,c[rec][2]),"cal")+".";				
						var caption = "Third degree burns extend throughout the layers of skin, and are often painless because they destroy the pain nerves. They can cause severe scarring or disablement, and can require amputation.";
					break;
					case "_2nd-50":
						var t_text = "2nd degree burns (50%)";
						var t_extra = "50% probability for 2nd degree burns at this yield is "+unit(bc.thermal_radiation_param_q(kt,c[rec][2]),"cal")+".";				
						var caption = "Second degree burns are deeper burns to several layers of the skin. They are very painful and require several weeks to heal. Extreme second degree burns can produce scarring or require grafting.";
					break;
					case "_1st-50":
						var t_text = "1st degree burns (50%)";
						var t_extra = "50% probability for 1st degree burns at this yield is "+unit(bc.thermal_radiation_param_q(kt,c[rec][2]),"cal")+".";				
						var caption = "First degree burns are superficial burns to the outer layers of the skin. They are painful but heal in 5-10 days. They are more or less the same thing as a sunburn.";
					break;
					case "_noharm-100":
						var t_text = "no harm";
						var t_extra = "100% probability of no significant thermal damage at this yield is "+unit(bc.thermal_radiation_param_q(kt,c[rec][2]),"cal")+".";				
						var caption = "The distance at which anybody beyond would definitely suffer no damage from thermal radiation (heat).";
					break;	
					default:
						var t_text = "";
						var t_extra = "";
						var caption = "";
					break;	
				}
	
				var effectCircle = {
					map: map,
					radius: c[rec][0]*mi2m,
					fill: true,
					fillColor: "#FFA500",
					fillOpacity: .3,
					stroke: true,
					color: "#FFA500",
					opacity: 1,
					weight: 1,
					zIndex: (circs+1)+(det_index+1)*10,
					title: "Thermal radiation radius ("+(t_text?t_text:c[rec][2]+" cal/cm<sup>2</sup>)"),
				};
				c_radii[det_index][circs] = newCircle(effectCircle,marker,pos);
				effectCaptions.push({
					title: "Thermal radiation radius ("+(t_text?t_text:unit(c[rec][2],"cal"))+")",
					caption: caption+(t_extra==""?"":" "+t_extra),
					radius: effectCircle.radius*m2km,
					fillColor: effectCircle.fillColor,
					strokeColor: effectCircle.color
				})

			break;

			case "psi":
				var p = parseInt(c[rec][2]);

				var effectCircle = {
					map: map,
					radius:  c[rec][0]*mi2m,
					fill: true,
					fillColor: "#"+colorStep(p-5,20,"808080","FF0000","800000","800000"),
					fillOpacity: p>=5?.3:lerp(.3,5,.2,1,p),
					stroke: true,
					color: "#"+colorStep(p-5,20,"808080","FF0000","800000","800000"),
					opacity: p>=5?1:lerp(1,5,.5,1,p),
					weight: p<5?1:2,
					zIndex: (circs+1)+(det_index+1)*10,
					title: "Air blast radius ("+addCommas(p)+" psi)",
				};
				c_radii[det_index][circs] = newCircle(effectCircle,marker,pos);

				switch(true) {
					case (p == 10000):  
						var caption = "10,000 psi is approximately the pressure felt at 4 miles under the ocean. Not much can withstand this.";
					break;
					case (p == 7000):
						var caption = "7,000 psi is supposedly the maximum amount of pressure that super-hardened American missile silos can withstand.";
					break;
					case (p<10000&&p>1000):
						var caption = "Missile silos can be blast hardened to survive many thousand psi of pressure, but not much else can.";
					break;
					case (p == 200):
						var caption = "200 psi is approximately the pressure felt inside of a steam boiler on a locomotive. Extreme damage to all civilian structures, some damage to even &quot;hardened&quot; structures.";
					break;
					case (p == 20):
						var caption = "At 20 psi overpressure, heavily built concrete buildings are severely damaged or demolished; fatalities approach 100%. Often used as a benchmark for <b>heavy</b> damage in cities.";
					break;
					case (p < 20 && p > 5):
						var caption = "Between moderate and heavy damage in cities.";
					break;
					case (p == 5):
						var caption = "At 5 psi overpressure, most residential buildings collapse, injuries are universal, fatalities are widespread. The chances of a fire starting in commercial and residential damage are high, and buildings so damaged are at high risk of spreading fire. Often used as a benchmark for <b>moderate</b> damage in cities.";
					break;
					case (p < 5 && p > 1):
						var caption = "Between light and moderate damage in cities. Buildings damaged with between 2 and 5 psi of blast are considered a major risk for fire spread (because they are damaged but still standing).";
					break;
					case (p == 1):
						var caption = "At a around 1 psi overpressure, glass windows can be expected to break. This can cause many injuries in a surrounding population who comes to a window after seeing the flash of a nuclear explosion (which travels faster than the pressure wave). Often used as a benchmark for <b>light</b> damage in cities.";
					break;
					default:
						var caption = "";
					break;				
				}
				if(airburst) {
					caption+=" Optimal height of burst to maximize this effect is "+unit(bc.opt_height_for_psi(kt,c[rec][2])*ft2km,"km",{prefer_smaller:true})+".";
				}

				var title = "";
				switch(p) {
					case 20: title ="Heavy blast damage radius ("+unit(20,"psi")+")"; break;
					case 5: title ="Moderate blast damage radius ("+unit(5,"psi")+")"; break;
					case 1: title ="Light blast damage radius ("+unit(1,"psi")+")"; break;
					default: title = "Air blast radius ("+unit(c[rec][2],"psi")+")";
				}

				effectCaptions.push({
					title: title,
					caption: caption,
					radius: effectCircle.radius*m2km,
					fillColor: effectCircle.fillColor,
					strokeColor: effectCircle.color
				})

			break;
			
			case "rem":
				var effectCircle = {
					map: map,
					radius:  c[rec][0]*mi2m,
					fill: true,
					fillColor: "#00FF00",
					fillOpacity: .3,
					stroke: true,
					color: "#00FF00",
					opacity: 1,
					weight: 1,
					zIndex: (circs+1)+(det_index+1)*10,
					title: "Radiation radius ("+(c[rec][2])+" rem)",
				};
				c_radii[det_index][circs] = newCircle(effectCircle,marker,pos);

				//linear fit to NAPB-90 data, table B-2, which is just LNT. cancer risk.
				var c_risk =0.0303*(c[rec][2])-0.2065;
				if(c_risk<1) {
					c_risk = "less than 1%";
				} else if(c_risk>100) {
					c_risk = "100%";
				} else {
					c_risk = Math.round(c_risk)+"%";
				}

				//incapacitation and death info comes from Jorma K. Miettinen, "Enhanced Radiation Warfare," BAS 33, no. 7 (1977), 32-37.
				var caption = unit(c[rec][2],"rem")+" ionizing radiation dose; ";
				if(c[rec][2]>=17000) {
					caption+="fatal, incapacitating within five minutes, death within one day."; //no need to talk about survivors		
				} else if(c[rec][2]>=7000) {
					caption+="fatal, incapacitating within five minutes, death within one to two days."; //no need to talk about survivors		
				} else if (c[rec][2]>=1000) {
					caption+="fatal, incapacitating within five minutes with recovery period, death within four to six days."; //no need to talk about survivors		
				} else if (c[rec][2]>=1000) {
					caption+="fatal, in two weeks or less."; //no need to talk about survivors
				} else if(c[rec][2]>=500) {
					caption+="likely fatal, in about 1 month; "+c_risk+" of survivors will eventually die of cancer as a result of exposure.";
				} else if(c[rec][2]>=250) {
					caption+="sickness inducing, medical care would be required, some deaths in 30-60 days; "+c_risk+" of survivors will eventually die of cancer as a result of exposure.";
				} else if(c[rec][2]>=100) {
					caption+="sickness inducing, less than 5% chance of death in 60 days; "+c_risk+" of survivors will die of cancer as a result of exposure.";
				} else if(c[rec][2]>0) {
					caption+="no immediate symptoms; "+c_risk+" of survivors will die of cancer as a result of exposure.";
				}
				effectCaptions.push({
					title: "Radiation radius ("+unit(c[rec][2],"rem")+")",
					caption: caption,
					radius: effectCircle.radius*m2km,
					fillColor: effectCircle.fillColor,
					strokeColor: effectCircle.color
				})

			break;
			
			case "fireball":
				var effectCircle = {
					map: map,
					radius:  c[rec][0]*mi2m,
					fill: true,
					fillColor: "#FFA500",
					fillOpacity: airburst?.3:.5,
					stroke: true,
					color: "#FFFF00",
					opacity: airburst?.8:1,
					weight: airburst?1:2,
					zIndex: (circs+1)+(det_index+1)*10,
					title: "Fireball radius",
				}
				c_radii[det_index][circs] = newCircle(effectCircle,marker,pos);

				var caption = "Maximum size of the nuclear fireball; relevance to damage on the ground depends on the height of detonation. If it touches the ground, the amount of radioactive fallout is significantly increased. Anything inside the fireball is effectively vaporized. ";
				if(airburst) caption+=" Minimum burst height for negligible fallout: "+unit(bc.minimum_height_for_negligible_fallout(kt)*mi2km,"km")+".";
				effectCaptions.push({
					title: "Fireball radius",
					caption: caption,
					radius: effectCircle.radius*m2km,
					fillColor: effectCircle.fillColor,
					strokeColor: effectCircle.color
				})

			break;

			case "crater":
				c.push([cr[0],"crater_lip",""]);

				var effectCircle = {
					map: map,
					radius:  cr[0]*mi2m,
					fill: true,
					fillColor: "#2E2E2E",
					fillOpacity: .5,
					stroke: true,
					color: "#2E2E2E",
					opacity: 1,
					weight: 1,
					zIndex: (circs+1)+(det_index+1)*10,
					title: "Crater lip radius",
				};
				c_radii[det_index][circs] = newCircle(effectCircle,marker,pos);
				
				effectCaptions.push({
					title: "Crater lip radius",
					id: effectCircle.id,
					radius: effectCircle.radius*m2km,
					fillColor: "#525252",
					fillOpacity: 0.8,
					strokeColor: "#2E2E2E"
				})

				effectCaptions.push({
					title: "Crater depth",
					legendkey: "<span style='padding-left: 4px; padding-right: 1px;text-align: center; display: inline-block;'>&darr;</span>",
					radius: cr[2]*mi2km,
					show_area: false,
					no_highlight: true
				})

				var effectCircle = {
					map: map,
					radius:  cr[1]*mi2m,
					fill: true,
					fillColor: "#2E2E2E",
					fillOpacity: .5,
					stroke: true,
					color: "#2E2E2E",
					opacity: 1,
					weight: 1,
					zIndex: (circs+1)+(det_index+1)*10,
					title: "Crater inner radius",
				};
				circs++;
				c_radii[det_index][circs] = newCircle(effectCircle,marker,pos);

				effectCaptions.push({
					title: "Crater inside radius",
					topinsert: "<div><a class='effectImage' href='"+assets+"images/craterdiagram.png' title='Click to enlarge this image' target='_blank' onclick='show_image(this); return false;'><img src='"+assets+"images/craterdiagram.png'></a></div>",
					radius: effectCircle.radius*m2km,
					fillColor: effectCircle.fillColor,
					fillOpacity: .5,
					strokeColor: effectCircle.color
				})

			break;
			
			/*
			case "cep":
				var effectCircle = newCircle({
					map: map,
					radius:  c[rec][0]*mi2m,
					fill: false,
					fillColor: "#0000FF",
					fillOpacity: 0,
					stroke: true,
					color: "#"+colorStep(c[rec][0],50,"8080FF","0000FF"),
					opacity: .8,
					weight: 1,
					zIndex: (circs+1)+(det_index+1)*10,
					title: "Circular Error Probable ("+c[rec][2]+"%)",
				},marker,pos);
				c_radii[det_index][circs] = effectCircle;

				var caption ="The radius (based on the user-defined CEP of "+unit(cep_ft*ft2km,"km")+") where the bomb or warhead has a "+c[rec][2]+"% chance of landing.";
				legend1 = "<p><div class='legendkey' index='"+det_index+"' radius='"+(c[rec][0]*mi2m)+"' style='background-color: #"+background_color+"; border: 1px solid #"+colorStep(c[rec][0],50,"8080FF","0000FF")+";'></div> Circular Error Probable ("+c[rec][2]+"%): "+unit(c[rec][0]*mi2km,"km",{show_area:true}) + "<br><small class='caption'>"+caption+"</small>"+legend1;			
			break;
			*/
		};
		circs++;
	};

	//reverse add the captions
	for(var i = effectCaptions.length-1; i>=0;i--) {
		var ec = effectCaptions[i];
		var o = "";
		o+=`<div class="effectCaption" `;
		if(typeof ec.no_highlight=="undefined") {
			o+=`index="${det_index}" radius="${ec.radius}"`;
		}
		o+=">";
		if(typeof ec.topinsert !="undefined") o+=ec.topinsert;
		o+=`<div class="effectCaptionHeader">`;
		o+=`<div class="legendkey" index="${det_index}" radius="${ec.radius}" `;
		if(typeof ec.fillOpacity=="undefined") ec.fillOpacity = 0.3;
		if(typeof ec.fillColor!="undefined") o+=`style="background-color: ${("rgba("+hex2rgb(ec.fillColor,true)+","+ec.fillOpacity+")")}; border: 1px solid ${ec.strokeColor};"`;
		o+=`>`;
		if(typeof ec.legendkey!="undefined") o+=ec.legendkey;
		o+=`</div> `;
		o+=`<span class="effectTitleRadius">`;
		o+=`<span class="effectTitle">${ec.title}:</span> `;
		if(typeof ec.radiusTxt == "undefined") {
			var show_area = typeof ec.show_area == "undefined"?true:ec.show_area;
			ec.radiusTxt = unit(ec.radius,"km",{show_area:show_area})
		}
		o+=`<span class="effectRadius">${ec.radiusTxt}</span>`;
		o+=`</span>`;
		o+=`</div>`;
		if(typeof ec.caption!="undefined") o+=`<div class="caption">${ec.caption}</div>`;
		o+=`</div>`;
		if(typeof ec.clear != "undefined" && ec.clear==true) o+="<br style='clear:both;'/>";
		legend1+=o;
	}


	if(airburst) {
		legend1+="<p><small>";
		if(hob_ft||hob_ft===0) {
			legend1+= "*Detonation altitude: "+unit(hob_ft*ft2km,"km",{"prefer_smaller":true})+".";
			if(hob_opt==1) {
				legend1+=" (Chosen to maximize the "+unit(hob_opt_psi,"psi")+" range.)";
			}
		} else {
			legend1+= "*Effects shown for multiple, different detonation altitudes.";
		}
		legend1+="</small></p>";
	}

	legend = legend + legend1;
		
	if(errs.length) {
		legend+="<hr><div id='effectsErrors'>The following errors were encountered trying to implement these settings:";
		legend+="<ul>";
		for(var i=0;i<errs.length;i++) {
			legend+="<li>"+errs[i]+"</li>";		
		}
		legend+="</ul></div>";
	}

	legend = legend + "<hr><small>Note: Rounding accounts for inconsistencies in the above numbers."
	if(kt>20000) legend = legend + " Yields above "+ktOrMt(20000,false,false,true)+" are derived from a scaling of "+ktOrMt(20000,true)+" yields, and are not as validated as those under "+ktOrMt(20000,true)+".";
	if(kt<1) legend = legend + " Yields under "+ktOrMt(1,false)+" are derived from a scaling of "+ktOrMt(1,true)+" yields, and are not as validated as those over "+ktOrMt(1,true)+"."
	legend = legend + "</small>";

	legend+="<div id='legend-multiple'></div>";

	legend = "<div id='legend-text'>"+legend+"</div>";
	legend+= "</div>"; //collapsable content div
	legend+="</div>";
	legends[det_index] = legend;

	if($("#option_autozoom").prop("checked") && (override_autozoom != true)) {
		var biggestBounds = getCircleBounds(c_radii[det_index][0]);
		fitBounds(map, biggestBounds);
	}


	$("#theLegend").html(legend);

	if(dets.length>1) {
		var m_legend = "";
		m_legend+="<hr><small>This map has multiple detonations. The above information is for detonation #<span id='current_legend_det'>"+(det_index+1)+"</span> only.";
		m_legend+=" View other detonation information: "
		m_legend+="<select id='legend_changer' onchange='change_legend(this.value);'>";
		for(var i=0;i<dets.length;i++) {
			if(i==det_index) {
				var chk = " selected";
			} else {
				var chk = "";
			}
			m_legend+="<option value='"+(i)+"'"+chk+">"+(i+1)+"</option>";
		}
		m_legend+="</select>";
		m_legend+=" <a href='#' onclick='edit_dets(); return false;'>Click here</a> to edit the detonation order.";
		m_legend+="</small><span id='det_editor'></span>";
		$("#legend-multiple").html(m_legend);
	}


	$("#thePermalink").html("<hr><big>&nbsp;&raquo; <span id='permalink'>"+permalink()+"</span> &laquo;</big></small>");

	if($("#option_logdata").prop("checked") != true) {
		pos_lat = latval(dets[det_index].pos);
		pos_lng = lngval(dets[det_index].pos);
		var log_obj = {
			ver: 2,
			target_lat: pos_lat,
			target_lng: pos_lng,
			kt: dets[det_index].kt,
			airburst: dets[det_index].airburst==true?1:0,
			casualties: dets[det_index].casualties==true?1:0,
			fallout: dets[det_index].fallout==true?1:0,
			linked: dets[det_index].linked==true?1:0,
			active_dets: (det_index+1),
		};
		if(MODE == GMAP) {
			if(google.loader.ClientLocation) {
				log_obj.user_country = user_country;
				log_obj.user_lat = google.loader.ClientLocation.latitude;
				log_obj.user_lng = google.loader.ClientLocation.longitude;
			}
		}
		if(MODE == LLET||MODE==MBOX) {
			if(clientLocation) {
				log.obj.user_lat = clientLocation.latitude;
				log.obj.user_lng = clientLocation.longitude;
			}
		}
		log_det(log_obj);
	}
	
	if(collapser) {
		$("#bottomFrame").scrollTop(1000);
	}
	
}